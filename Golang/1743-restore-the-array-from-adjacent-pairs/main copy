/*
Score:
第二例
执行用时：268 ms, 在所有 Go 提交中击败了15.94% 的用户
内存消耗：31.7 MB, 在所有 Go 提交中击败了62.32% 的用户


Points:
1.

Thoughts:
1. 什么情况下会存在多种解答? 任何一种情况都存在至少两个解, 正续和逆序
2. 除了首尾, 每个数都会在两个数对中出现



存在一个由 n 个不同元素组成的整数数组 nums ，但你已经记不清具体内容。好在你还记得 nums 中的每一对相邻元素。

给你一个二维整数数组 adjacentPairs ，大小为 n - 1 ，其中每个 adjacentPairs[i] = [ui, vi] 表示元素 ui 和 vi 在 nums 中相邻。

题目数据保证所有由元素 nums[i] 和 nums[i+1] 组成的相邻元素对都存在于 adjacentPairs 中，存在形式可能是 [nums[i], nums[i+1]] ，也可能是 [nums[i+1], nums[i]] 。这些相邻元素对可以 按任意顺序 出现。

返回 原始数组 nums 。如果存在多种解答，返回 其中任意一个 即可。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/restore-the-array-from-adjacent-pairs

*/
package leetcode

import (
	"fmt"
)

func restoreArray(adjacentPairs [][]int) []int {
	res, search_map := []int{}, map[int][]int{}
	for _, pairs := range adjacentPairs {
		left := pairs[0]
		right := pairs[1]
		if val, ok := search_map[left]; ok {
			search_map[left] = append(val, right)
		} else {
			search_map[left] = []int{right}
		}
		if val, ok := search_map[right]; ok {
			search_map[right] = append(val, left)
		} else {
			search_map[right] = []int{left}
		}

	}
	fmt.Println(search_map) //空间复杂度2n
	//找到端点
	for k, v := range search_map {
		if len(v) == 1 {
			res = append(res, k, v[0])
			// delete(search_map, k)
			break
		}
	}
	// 按图索骥
	for i, j := res[0], res[1]; ; {
		val := search_map[j]
		if val[0] == i {
			res = append(res, val[1])
			i, j = j, val[1]
		} else {
			res = append(res, val[0])
			i, j = j, val[0]
		}
		if len(val) == 1 {
			break
		}

	}

}

func search(nums [][]int, search_map *map[int][][]int) (int, bool) {
	for _, i := range nums {
		for _, j := range i {
			if _, ok := (*search_map)[j]; ok {
				return j, true
			}
		}
	}
	return 0, false
}

// func restoreArray1(adjacentPairs [][]int) []int {
// 	//不需要尝试为每一对数中的两个数创建映射, 但是如果这样就有概率丢失端部的映射
// 	res, search_map := []int{}, map[int][]int{}
// 	for _, pairs := range adjacentPairs {
// 		left := pairs[0]
// 		right := pairs[1]
// 		if val, ok := search_map[left]; ok {

// 		}
// 	}

// 	return res

// }

type truck struct {
	arr    []int
	left   int
	right  int
	isLeft bool
}

func join(a *truck, b *truck) bool {
	// 以a为主续, b的只取前2
	// 返回值表示是在左边join还是在右边join
	if len(a.arr) < len(b.arr) {
		a, b = b, a
	}
	if a.isLeft {
		if b.isLeft {
			IntReverse(b, false)
			a.arr = append(b.arr, a.arr[1:]...)
		} else {
			a.arr = append(b.arr, a.arr[1:]...)
		}
		return true
	} else {
		if b.isLeft {
			a.arr = append(a.arr, b.arr[1])
		} else {
			IntReverse(b, false)
			a.arr = append(a.arr, b.arr[0])
		}
		return false
	}
}

func IntReverse(slice []int, copy bool) []int {
	if copy {
		slice = slice[:]
	}
	for i, j := 0, len(slice)-1; i < j; i, j = i+1, j-1 {
		slice[j], slice[i] = slice[i], slice[j]
	}
	if copy {
		return slice
	} else {
		return []int{}
	}
	// fmt.Println("yes")

}
